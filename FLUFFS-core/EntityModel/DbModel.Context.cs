//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbModelContainer : DbContext
    {
        public DbModelContainer()
            : base("name=DbModelContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Index> Indices { get; set; }
        public virtual DbSet<TrackedFolder> TrackedFolders { get; set; }
        public virtual DbSet<TrackedFile> TrackedFiles { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<SearchJob> SearchJobs { get; set; }
        public virtual DbSet<SearchString> SearchStrings { get; set; }
        public virtual DbSet<Regex> Regexes { get; set; }
        public virtual DbSet<ShrinkJob> ShrinkJobs { get; set; }
        public virtual DbSet<ReductionLog> ReductionLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkingSet> WorkingSets { get; set; }
        public virtual DbSet<RegExTemplate> RegExTemplates { get; set; }
    
        public virtual ObjectResult<TrackedFilesDue_Result> TrackedFilesDue(Nullable<int> rowCount, Nullable<int> searchJobId)
        {
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("RowCount", rowCount) :
                new ObjectParameter("RowCount", typeof(int));
    
            var searchJobIdParameter = searchJobId.HasValue ?
                new ObjectParameter("SearchJobId", searchJobId) :
                new ObjectParameter("SearchJobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TrackedFilesDue_Result>("TrackedFilesDue", rowCountParameter, searchJobIdParameter);
        }
    
        public virtual int MarkFileDone(Nullable<int> fileId, Nullable<int> searchJobId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var searchJobIdParameter = searchJobId.HasValue ?
                new ObjectParameter("SearchJobId", searchJobId) :
                new ObjectParameter("SearchJobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkFileDone", fileIdParameter, searchJobIdParameter);
        }
    
        public virtual ObjectResult<FilesDueForHash_Result> FilesDueForHash()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FilesDueForHash_Result>("FilesDueForHash");
        }
    }
}
